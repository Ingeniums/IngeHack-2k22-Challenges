

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_139 = Integer(139); _sage_const_36 = Integer(36); _sage_const_80 = Integer(80); _sage_const_7 = Integer(7); _sage_const_43 = Integer(43); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_92517377285964712700402768201686388458777796513029661121387518457855305003887 = Integer(92517377285964712700402768201686388458777796513029661121387518457855305003887); _sage_const_38797243845245332525942134691000380783420213418502850949997762221448580551178 = Integer(38797243845245332525942134691000380783420213418502850949997762221448580551178); _sage_const_90535513088702227288147691079962260896031851928073931499601588803955767119399 = Integer(90535513088702227288147691079962260896031851928073931499601588803955767119399); _sage_const_57516588543456146838199882006427760473316432435743787681085541042704497002386 = Integer(57516588543456146838199882006427760473316432435743787681085541042704497002386); _sage_const_40968551252076601267516886191968225258642079470095088696874521610682853644694 = Integer(40968551252076601267516886191968225258642079470095088696874521610682853644694); _sage_const_24816742899058014660491715684544746934403517722825986685547561050157776456982 = Integer(24816742899058014660491715684544746934403517722825986685547561050157776456982); _sage_const_24576908297795652697606612249696595739976335097722967340743949068201091050924 = Integer(24576908297795652697606612249696595739976335097722967340743949068201091050924); _sage_const_902218707944511428508944163907946761763022811 = Integer(902218707944511428508944163907946761763022811); _sage_const_902218707944511428508944163907946761763022810 = Integer(902218707944511428508944163907946761763022810); _sage_const_208936452217600192180393827102323580818439050 = Integer(208936452217600192180393827102323580818439050); _sage_const_212950229796201133508018850583402578730923913 = Integer(212950229796201133508018850583402578730923913); _sage_const_700352764988553493480813431886677029352850747 = Integer(700352764988553493480813431886677029352850747); _sage_const_380473098128032723375022309139277511036504749 = Integer(380473098128032723375022309139277511036504749)
from sage.all import *



F = Zmod(_sage_const_139 )
x = F(_sage_const_36 )
y = F(_sage_const_80 )
x1 = F(_sage_const_7 )
y1 = F(_sage_const_43 )
a = ((y1**_sage_const_2  -x1**_sage_const_3  - y**_sage_const_2  +x**_sage_const_3 ) / (x1-x))
b = ((y**_sage_const_2 -x**_sage_const_3 -a*x))

def SmartAttack(P,Q,p):
    E = P.curve()
    Eqp = EllipticCurve(Qp(p, _sage_const_2 ), [ ZZ(t) + randint(_sage_const_0 ,p)*p for t in E.a_invariants() ])

    P_Qps = Eqp.lift_x(ZZ(P.xy()[_sage_const_0 ]), all=True)
    for P_Qp in P_Qps:
        if GF(p)(P_Qp.xy()[_sage_const_1 ]) == P.xy()[_sage_const_1 ]:
            break

    Q_Qps = Eqp.lift_x(ZZ(Q.xy()[_sage_const_0 ]), all=True)
    for Q_Qp in Q_Qps:
        if GF(p)(Q_Qp.xy()[_sage_const_1 ]) == Q.xy()[_sage_const_1 ]:
            break

    p_times_P = p*P_Qp
    p_times_Q = p*Q_Qp

    x_P,y_P = p_times_P.xy()
    x_Q,y_Q = p_times_Q.xy()

    phi_P = -(x_P/y_P)
    phi_Q = -(x_Q/y_Q)
    k = phi_Q/phi_P
    return ZZ(k)

# Curve parameters --> Replace the next three lines with given values
p = _sage_const_92517377285964712700402768201686388458777796513029661121387518457855305003887  
a = _sage_const_38797243845245332525942134691000380783420213418502850949997762221448580551178 
b = _sage_const_90535513088702227288147691079962260896031851928073931499601588803955767119399 

# Define curve
E = EllipticCurve(GF(p), [a, b])
assert(E.order() == p)

# Replace the next two lines with given values
P1 = E(_sage_const_57516588543456146838199882006427760473316432435743787681085541042704497002386  , _sage_const_40968551252076601267516886191968225258642079470095088696874521610682853644694 )
P2 = E(_sage_const_24816742899058014660491715684544746934403517722825986685547561050157776456982  , _sage_const_24576908297795652697606612249696595739976335097722967340743949068201091050924 )

print(SmartAttack(P1,P2,p))





p = _sage_const_902218707944511428508944163907946761763022811 
a = _sage_const_902218707944511428508944163907946761763022810  
b = _sage_const_0 

# Define curve
E = EllipticCurve(GF(p), [a, b])
order = E.order()
print(is_prime(order))

# Replace the next two lines with given values
P1 = E(_sage_const_208936452217600192180393827102323580818439050  , _sage_const_212950229796201133508018850583402578730923913 )
P2 = E(_sage_const_700352764988553493480813431886677029352850747  , _sage_const_380473098128032723375022309139277511036504749 )
n = P1.order()

k = _sage_const_1 
while (p**k - _sage_const_1 ) % order:
	k += _sage_const_1 

K = GF(p**k, names=('a',)); (a,) = K._first_ngens(1)
EK = E.base_extend(K)
PK = EK(P2)
GK = EK(P1)

while True:
	R = EK.random_point()
	m = R.order()
	d = gcd(m,n)
	Q = (m//d)*R
	if n / Q.order() not in ZZ:
		continue
	if n == Q.order():
		break

print('Computing pairings')
alpha = GK.weil_pairing(Q,n)
beta = PK.weil_pairing(Q,n)

print("Computing the log")
dd = beta.log(alpha)
print(dd)


